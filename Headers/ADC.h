/* ###################################################################
 **     THIS COMPONENT MODULE IS GENERATED BY USER
 **     Filename    : ADC.h
 **     Project     : semg_mkl15z128vlh4
 **     Processor   : MKL15Z128VLH4
 **     Component   : ADS1198
 **     Version     : APRIL 2010-REVISED NOVEMBER 2011
 **     Datasheet   : SBAS471C
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2013-07-12, 20:06, # CodeGen: 0
 **     Author	    : Dong
 **     Abstract    :
 **			This file contains ADC operation functions.
 **     Settings    :
 **
 **     Contents    :
 **         Init               - void ADCInit(eADCFlag adcFlag);
 **         Configure          - LDD_TError ADCConfigure(eADCFlag adcFlag);
 **         Enable             - LDD_TError ADCEnable(eADCFlag adcFlag);
 **         Disable            - LDD_TError ADCDisable(eADCFlag adcFlag);
 **         StartConvert       - LDD_TError ADCStartConvertByHardware(eADCFlag adcFlag);
 **                            - LDD_TError ADCStartConvertByCommand(eADCFlag adcFlag);
 **         StopConvert        - LDD_TError ADCStopConvertByHardware(eADCFlag adcFlag);
 **                            - LDD_TError ADCStopConvertByCommand(eADCFlag adcFlag);
 **         Reset              - void ADCResetByHardware(eADCFlag adcFlag);
 **                            - LDD_TError ADCResetByCommand(eADCFlag adcFlag);
 **         WakeUp             - LDD_TError ADCWakeUp(eADCFlag adcFlag);
 **         StandBy            - LDD_TError ADCStandBy(eADCFlag adcFlag);
 **         RDATAC             - LDD_TError ADCReadDataContinuous(eADCFlag adcFlag);
 **         SDATAC             - LDD_TError ADCStopReadDataContinuous(eADCFlag adcFlag);
 **         SendCommand        - LDD_TError ADCSendCommand(eADCFlag adcFlag, byte* cmd);
 **         ReadRegister       - LDD_TError ADCReadRegister(eADCFlag adcFlag, byte regAddrbyte* dat, uint8 n);
 **         WriteRegister      - LDD_TError ADCWriteRegister(eADCFlag adcFlag, byte regAddr, byte* dat, uint8 n);
 **         ReadData           - LDD_TError ADCReadContinuousData(eADCFlag adcFlag, byte* dat, uint8 n);
 **                            - LDD_TError ADCReadData(eADCFlag adcFlag, byte* dat, uint8 n);
 **         ADCDataInit        - void ADCDataInit(eADCFlag adcFlag, TADCPtr userDataPtr);
 **         CheckCommand       - LDD_TError CheckCommand(byte cmd);
 **
 **     Mail      	: pzdongdong@163.com
 **
 **     Revision    : No.  Name        Date/Time        Content
 ** ###################################################################*/
/*!
 * @file ADC.h
 * @version 01.00
 * @brief
 * 		This file contains ADC operation functions.
 */
/*!
 *  @addtogroup ADC_module	ADC module documentation
 *      This module contains ADC operation functions.
 *  @{
 */

/* MODULE ADC. */

#ifndef ADC_H_
#define ADC_H_

/* MODULE Init. */

/* {Default RTOS Adapter} No RTOS includes */
#include "Macros.h"

#ifdef __cplusplus
extern "C"
{
#endif

/*
 * ===================================================================
 *     Method      :  ADCInit (Component ADC)
 */
/*!
 *     @brief
 *          Initializes ADC.
 *          The method is called in the PeripheralInit function and will be called
 *          only once.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *          void
 */
/* ===================================================================*/
void ADCInit(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCEnable (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~CS is low, enable ADC.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCEnable(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCDisable (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~CS is High, disable ADC.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCDisable(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      : ADCConfigure (Module ADC)
 */
/*!
 *     @brief
 *          Configure the registers of ADC via SPI0.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCConfigure(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCStartConvertByHardware (Component ADC)
 */
/*!
 *     @brief
 *          Signal START is high, ADC starts to convert.
 *          This function starts ADC to convert via signal START.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCStartConvertByHardware(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCStartConvertByCommand (Component ADC)
 */
/*!
 *     @brief
 *          MCU sends START command to ADC, ADC starts to convert.
 *          This function starts ADC to convert via SPI0.
 *          In this method, signal START must be low.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStartConvertByCommand(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCStopConvertByHardware (Component ADC)
 */
/*!
 *     @brief
 *          Signal START is low, ADC stops converting.
 *          This function starts ADC to convert via signal START.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - ERR_OK: Output of this pin is OK.
 *                          - ERR_COMMON: Output of this pin goes wrong.
 */
/* ===================================================================*/
LDD_TError ADCStopConvertByHardware(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCStartConvertByCommand (Component ADC)
 */
/*!
 *     @brief
 *          MCU sends STOP command to ADC, ADC stops to convert.
 *          This function stops ADC to convert via SPI0.
 *          In this method, signal START must be low.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStopConvertByCommand(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCResetByHardware (Component ADC)
 */
/*!
 *     @brief
 *          Signal ~RESET varies from high to low to high, ADC resets.
 *          This function resets ADC via signal RESET.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *          void
 */
/* ===================================================================*/
void ADCResetByHardware(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      :  ADCResetByCommand (Component ADC)
 */
/*!
 *     @brief
 *          MCU sends RESET command to ADC, ADC resets.
 *          This function resets ADC via SPI0.
 *          Avoid sending any commands during reset.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCResetByCommand(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      : ADCWakeUp (Component ADC)
 */
/*!
 *     @brief
 *          Send command WAKEUP to ADC via SPI0 to wake up ADC
 *          from low-power standby mode.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCWakeUp(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      : ADCStandBy (Component ADC)
 */
/*!
 *     @brief
 *          Send command STANDBY via SPI0 to make ADC entering
 *          the low-power standby mode.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStandBy(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      : ADCReadDataContinuous (Component ADC)
 */
/*!
 *     @brief
 *          Send command RDATAC via SPI0 to make the conversion data
 *          of ADC can read continuously without command RDATA.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCReadDataContinuous(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      : ADCWakeUp (Component ADC)
 */
/*!
 *     @brief
 *          Send command SDATAC to ADC via SPI0 to stop ADC's RDATAC mode.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *                          - See PE_Error.h
 */
/* ===================================================================*/
LDD_TError ADCStopReadDataContinuous(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      : ADCSendCommand (Component ADC)
 */
/*!
 *     @brief
 *          Send command to ADC via SPI0. Please use ADCReadRegister and
 *          ADCWriteRegister, but not this function, to read and write ADC's register!
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @param[in]
 *          cmd             - Pointer to command to be sent.
 *                            See group ADC Commands in Macros.h.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError ADCSendCommand(EADCFlag adcFlag, byte* cmd);

/*
 * ===================================================================
 *     Method      : ADCReadRegister (Component ADC)
 */
/*!
 *     @brief
 *          Read data from register of ADC via SPI0.
 *          The data returned in dat[0] and dat[1] are useless. The real data
 *          starts from dat[2]!
 *     @param[in]
 *          regAddr         - The first address of register(s) to be read.
 *     @param[out]
 *          dat             - Pointer to the buffer where received data in.
 *     @param[in]
 *          n               - The number of registers to be read.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError ADCReadRegister(byte regAddr, byte* dat, uint8 n);

/*
 * ===================================================================
 *     Method      : ADCWriteRegister (Component ADC)
 */
/*!
 *     @brief
 *          Write data to register of ADC via SPI0.
 *     @param[in]
 *          regAddr         - The first address of register(s) to be written.
 *     @param[in]
 *          dat             - Pointer to buffer where data to be written in.
 *     @param[in]
 *          n               - The number of registers to be written.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK           - OK.
 *                              - ERR_SPEED        - This device does not work in
 *                                                   the active clock configuration.
 *                              - ERR_DISABLED     - Component is disabled.
 *                              - ERR_BUSY         - The previous receive request is
 *                                                   pending.
 *                              - etc.             - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError ADCWriteRegister(byte regAddr, byte* dat, uint8 n);

/*
 * ===================================================================
 *     Method      : ADCReadContinuousData (Component ADC)
 */
/*!
 *     @brief
 *          Read conversion data from ADC in RDATAC mode via SPI0.
 *     @param[out]
 *          dat             - Pointer to buffer where received data in.
 *     @param[in]
 *          n               - The length of data bytes to be read.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError ADCReadContinuousData(byte* dat, uint8 n);

/*
 * ===================================================================
 *     Method      : ADCReadData (Component ADC)
 */
/*!
 *     @brief
 *          Read conversion data from ADC in RDATA mode via SPI0.
 *          The data returned in dat[0] is useless. The real data
 *          starts from dat[1]!
 *     @param[out]
 *          dat             - Pointer to buffer where received data in.
 *     @param[in]
 *          n               - The length of data bytes to be read.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError ADCReadData(byte* dat, uint8 n);

/*
 * ===================================================================
 *     Method      : ADCDataInit(Module ADC)
 */
/*!
 *     @brief
 *          This method initialize the ADC device structure, including
 *          data, setting and status.
 *     @param[in]
 *          userDataPtr     - Pointer to specific user data.
 *     @return
 *          void
 */
/* ===================================================================*/
void ADCDataInit(TADCPtr userDataPtr);

/*
 * ===================================================================
 *     Method      : ReadADCData(Module Process)
 */
/*!
 *     @brief
 *          This method reads ADC's data when ADC's is ready to be read.
 *          This method is called in function
 *          EINT_AD_NOT_DRDY0_OnInterrupt or EINT_AD_NOT_DRDY0_OnInterrupt,
 *          file Events.c
 *     @param
 *          void
 *     @return
 *          void
 */
/* ===================================================================*/
//void ReadADCData(void);

/*
 * ===================================================================
 *     Method      : EnableADCSPI (Module ADC)
 */
/*!
 *     @brief
 *          This method pull the CS signal down to enable corresonding ADC's SPI.
 *          Each time only one ADC's SPI is available.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *          void
 */
/* ===================================================================*/
void EnableADCSPI(EADCFlag adcFlag);

/*
 * ===================================================================
 *     Method      : DisableADCSPI (Module ADC)
 */
/*!
 *     @brief
 *          This method pull the CS signal up to disable corresonding ADC's SPI.
 *          Each time only one ADC's SPI is disabled.
 *     @param[in]
 *          adcFlag         - Shows which ADC is selected.
 *                            Possible value: eADC0, eADC1.
 *     @return
 *          void
 */
/* ===================================================================*/
void DisableADCSPI(EADCFlag adcFlag);

    /* END ADC. */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
/* ADC_H_ */

/*!
 * @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Dong
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */

