/* ###################################################################
 **     THIS COMPONENT MODULE IS GENERATED BY USER
 **     Filename    : Utilities.h
 **     Project     : semg_mkl15z128vlh4
 **     Processor   : MKL15Z128VLH4
 **     Component   :
 **     Version     :
 **     Datasheet   :
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2013-Jul 25, 2013, 7:28:41 PM, # CodeGen: 0
 **     Author	    : Dong
 **     Abstract    :
 **			This file contains general functions used in this project.
 **     Settings    :
 **
 **     Contents    :
 **         Delay             - void Delay1Us();
 **                           - LDD_TError DelayUs(uint32 n);
 **                           - LDD_TError DelayMs(uint32 n);
 **                           - LDD_TError DelayS(uint32 n);
 **                           - LDD_TError DelaySomeUs(uint32 n);
 **                           - LDD_TError DelaySomeMs(uint32 n);
 **                           - LDD_TError DelaySomeS(uint32 n);
 **         GetCurrentTime    - uint32 GetCurrentUs(void);
 **                           - uint32 GetCurrentMs(void);
 **                           - uint32 GetCurrentS(void);
 **         PrintErrorMessage - void PrintErrorMessage(LDD_TError err);
 **
 **
 **     Mail      	: pzdongdong@163.com
 **
 **     Revision    : No.  Name        Data/Time        Content
 ** ###################################################################*/
/*!
 * @file Utilities.h
 * @version 01.00
 * @brief
 *      This file contains general functions used in this project.
 */
/*!
 *  @addtogroup Uti Utilities
 *      This module contains general functions used in this project.
 *  @{
 */

#ifndef UTILITIES_H_
#define UTILITIES_H_
/* Module Utilities */

#include "PE_Types.h"
#include "Settings.h"

#ifdef __cplusplus
extern "C"
{
#endif

/*
 * ===================================================================
 *     Method      : Delay1Us(Module Utilities)
 */
/*!
 *     @brief
 *          This method delays 1us most precisely with assembly code.
 *          Error limit: +/-1%.
 *     @param
 *          void
 *     @return
 *          void
 */
/* ===================================================================*/
void Delay1Us();

/*
 * ===================================================================
 *     Method      : DelayUs(Component SysTick)
 */
/*!
 *     @brief
 *          This method delays n us precisely with SysTick being the calculating
 *          the beats.
 *          Error limit: +/-0.001%.
 *     @param[in]
 *          n       - How many microseconds to delay.
 *     @return
 *                  - Error code.
 *                    See PE_Error.h and Macros.h for more detailed information.
 */
/* ===================================================================*/
LDD_TError DelayUs(uint32 n);

/*
 * ===================================================================
 *     Method      : DelayMs(Component SysTick)
 */
/*!
 *     @brief
 *          This method delays n Ms precisely with SysTick being the calculating
 *          the beats.
 *          Error limit: +/-0.001%.
 *     @param[in]
 *          n       - How many milliseconds to delay.
 *     @return
 *                  - Error code.
 *                    See PE_Error.h and Macros.h for more detailed information.
 */
/* ===================================================================*/
LDD_TError DelayMs(uint32 n);

/*
 * ===================================================================
 *     Method      : DelayS(Component SysTick)
 */
/*!
 *     @brief
 *          This method delays n s with repeat a 1000ms delay in a loop which may
 *          not be that precisely.
 *          Error limit: +/-0.001%.
 *     @param[in]
 *          n       - How many seconds to delay.
 *     @return
 *                  - Error code.
 *                    See PE_Error.h and Macros.h for more detailed information.
 */
/* ===================================================================*/
LDD_TError DelayS(uint32 n);

/*
 * ===================================================================
 *     Method      : DelaySomeUs(Module Utilities)
 */
/*!
 *     @brief
 *          This method delays n us roughly with codes calculating
 *          the time.
 *          Error limit: +4%.
 *     @param[in]
 *          n       - How many microseconds to delay.
 *     @return
 *                  - Error code.
 *                    See PE_Error.h and Macros.h for more detailed information.
 */
/* ===================================================================*/
LDD_TError DelaySomeUs(uint32 n);

/*
 * ===================================================================
 *     Method      : DelaySomeMs(Module Utilities)
 */
/*!
 *     @brief
 *          This method delays n Ms roughly with codes calculating
 *          the time.
 *          Error limit: +4%.
 *     @param[in]
 *          n       - How many milliseconds to delay.
 *     @return
 *                  - Error code.
 *                    See PE_Error.h and Macros.h for more detailed information.
 */
/* ===================================================================*/
LDD_TError DelaySomeMs(uint32 n);

/*
 * ===================================================================
 *     Method      : DelaySomeS(Module Utilities)
 */
/*!
 *     @brief
 *          This method delays n s roughly with codes calculating
 *          the time.
 *          Error limit: +4%.
 *     @param[in]
 *          n       - How many seconds to delay.
 *     @return
 *                  - Error code.
 *                    See PE_Error.h and Macros.h for more detailed information.
 */
/* ===================================================================*/
LDD_TError DelaySomeS(uint32 n);

/*
 * ===================================================================
 *     Method      : GetCurrentUs(Module Utilities)
 */
/*!
 *     @brief
 *         	This method returns the current value of total microseconds
 *         	since power on.
 *     @param
 *          void
 *     @return
 *         	                - Total microseconds since power on.
 */
/* ===================================================================*/
uint32 GetCurrentUs(void);

/*
 * ===================================================================
 *     Method      : GetCurrentMs(Module Utilities)
 */
/*!
 *     @brief
 *          This method returns the current value of total milliseconds
 *          since power on.
 *     @param
 *          void
 *     @return
 *                          - Total milliseconds since power on.
 */
/* ===================================================================*/
uint32 GetCurrentMs(void);

/*
 * ===================================================================
 *     Method      : GetCurrentS(Module Utilities)
 */
/*!
 *     @brief
 *          This method returns the current value of total seconds since
 *          power on.
 *     @param
 *          void
 *     @return
 *                          - Total seconds since power on.
 */
/* ===================================================================*/
uint32 GetCurrentS(void);

#if DEBUG
/*
 * ===================================================================
 *     Method      : PrintErrorMessage(Module Utilities)
 */
/*!
 *     @brief
 *         	this method catches the error and print the right error message.
 *     @param[in]
 *         	err             - The error occurred.
 *     @return
 *          void
 */
/* ===================================================================*/
void PrintErrorMessage(LDD_TError err);
#endif

    /* END Utilities. */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
/* #ifndef UTILITIES_H_ */

/*!
 * @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Dong
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
