/* ###################################################################
 **     THIS COMPONENT MODULE IS GENERATED BY USER
 **     Filename    : SPI.c
 **     Project     : semg_mkl15z128vlh4
 **     Processor   : MKL15Z128VLH4
 **     Component   :
 **     Version     :
 **     Datasheet   :
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2013-Sep 20, 2013, 4:29:29 PM, # CodeGen: 1
 **     Author      : Dong
 **     Abstract    :
 **     Abstract    :
 **         This file contains high level functions on receiving and sending data via SPI.
 **     Settings    :
 **
 **     Contents    :
 **        ReceiveData     - SPI0ReceiveData(LDD_DMA_TAddress destAddr, LDD_DMA_TByteCount receiveByteCount);
 **                        - SPI1ReceiveData(LDD_DMA_TAddress destAddr, LDD_DMA_TByteCount sendByteCount);
 **        SendData        - SPI0SendData(LDD_DMA_TAddress srcAddr, LDD_DMA_TByteCount receiveByteCount);
 **                        - SPI1SendData(LDD_DMA_TAddress srcAddr, LDD_DMA_TByteCount receiveByteCount);
 **        ReceiveSendData - SPI0ReceiveSendData(ESPIMode mode,
 **                                              LDD_DMA_TAddress srcAddr, LDD_DMA_TAddress destAddr,
 **                                              LDD_DMA_TByteCount receiveByteCount, LDD_DMA_TByteCount sendByteCount);
 **                        - SPI1ReceiveSendData(LDD_DMA_TAddress srcAddr, LDD_DMA_TAddress destAddr,
 **                                              LDD_DMA_TByteCount receiveByteCount, LDD_DMA_TByteCount sendByteCount);
 **     Mail        : pzdongdong@163.com
 **
 **     Revision    : No.  Name        Data/Time        Content
 ** ###################################################################*/
/*!
 * @file SPI.h
 * @version 01.00
 * @brief
 *      This file contains high level functions on receiving and sending data via SPI.
 */
/*!
 *  @addtogroup SPI_Operation SPI Operation
 *      This module contains high level functions on receiving and sending data via SPI.
 *  @{
 */

#ifndef SPI_H_
#define SPI_H_

/* MODULE SPI */

/* {Default RTOS Adapter} No RTOS includes */

#include "Macros.h"

#ifdef __cplusplus
extern "C"
{
#endif

/*
 * ===================================================================
 *     Method      : SPI0ReceiveData( Component SPI )
 */
/*!
 *     @brief
 *          This method packs a serious operations of receiving data from
 *          SPI0. Receive data from SPI0 directly with it.
 *     @param[out]
 *          destAddr        - The address of destination buffer.
 *     @param[in]
 *          receiveByteCount   - The number of bytes to be received.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError SPI0ReceiveData(LDD_DMA_TAddress destAddr, LDD_DMA_TByteCount receiveByteCount);

/*
 * ===================================================================
 *     Method      : SPI0SendData( Component SPI )
 */
/*!
 *     @brief
 *          This method packs a serious operations of sending data via
 *          SPI0. Send data via SPI0 directly with it.
 *     @param[in]
 *          srcAddr         - The address of source buffer.
 *     @param[in]
 *          sendByteCount  - The number of bytes to be written.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError SPI0SendData(LDD_DMA_TAddress srcAddr, LDD_DMA_TByteCount sendByteCount);

/*
 * ===================================================================
 *     Method      : SPI0ReceiveSendData( Component SPI )
 */
/*!
 *     @brief
 *          This method packs a serious operations of receiving & sending data via
 *          SPI0. Receive & send data from SPI0 directly with it.
 *     @param[in]
 *          mode            - The SPI mode, polling, interrupt or DMA.
 *     @param[in]
 *          srcAddr         - The address of source buffer.
 *     @param[out]
 *          destAddr        - The address of destination buffer.
 *     @param[in]
 *          receiveByteCount   - The number of bytes to be received & write.
 *     @param[in]
 *          sendByteCount  - The number of bytes to be written.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError SPI0ReceiveSendData(ESPIMode mode, LDD_DMA_TAddress srcAddr, LDD_DMA_TAddress destAddr, LDD_DMA_TByteCount receiveByteCount, LDD_DMA_TByteCount sendByteCount);

/*
 * ===================================================================
 *     Method      : SPI1ReceiveData( Component SPI )
 */
/*!
 *     @brief
 *          This method packs a serious operations of receiving data from
 *          SPI1. Receive data from SPI1 directly with it.
 *     @param[out]
 *          destAddr        - The address of destination buffer.
 *     @param[in]
 *          receiveByteCount   - The number of bytes to be receive.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError SPI1ReceiveData(LDD_DMA_TAddress destAddr, LDD_DMA_TByteCount receiveByteCount);

/*
 * ===================================================================
 *     Method      : SPI1SendData( Component SPI )
 */
/*!
 *     @brief
 *          This method packs a serious operations of sending data via
 *          SPI1. Send data via SPI1 directly with it.
 *     @param[in]
 *          srcAddr         - The address of source buffer.
 *     @param[in]
 *          sendByteCount  - The number of bytes to be written.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError SPI1SendData(LDD_DMA_TAddress srcAddr, LDD_DMA_TByteCount sendByteCount);

/*
 * ===================================================================
 *     Method      : SPI1ReceiveSendData( Component SPI )
 */
/*!
 *     @brief
 *          This method packs a serious operations of receiving & sending data via
 *          SPI1. Receive & send data from SPI1 directly with it.
 *     @param[in]
 *          srcAddr         - The address of source buffer.
 *     @param[out]
 *          destAddr        - The address of destination buffer.
 *     @param[in]
 *          receiveByteCount   - The number of bytes to be received & write.
 *     @param[in]
 *          sendByteCount  - The number of bytes to be written.
 *     @return
 *                          - Error code of the the transmission status.
 *                          - Possible codes:
 *                              - ERR_OK       - OK.
 *                              - ERR_SPEED    - This device does not work in
 *                                               the active clock configuration.
 *                              - ERR_DISABLED - Component is disabled.
 *                              - ERR_BUSY     - The previous receive request is
 *                                               pending.
 *                              - etc.         - See PE_Error.h.
 */
/* ===================================================================*/
LDD_TError SPI1ReceiveSendData(LDD_DMA_TAddress srcAddr, LDD_DMA_TAddress destAddr, LDD_DMA_TByteCount receiveByteCount, LDD_DMA_TByteCount sendByteCount);

    /* End MODULE SPI */
/*!
 * @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Dong
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */




    /* END MODULE SPI */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
/* SPI_H_ */

/*!
 * @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Dong
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
